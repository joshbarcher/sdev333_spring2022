package gui;

import javafx.application.Application;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.geometry.Side;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.Stage;
import search.DictionarySearch;
import search.IDictionary;

import java.util.Arrays;

/**
 * This builds a GUI in Java FX that allows a user to
 * search for words in a dictionary with auto-complete.
 * A word that is selected can then be found in the
 * dictionary and a definition for the word will be
 * provided.
 *
 * DO NOT EDIT THIS FILE!
 *
 * @author Josh Archer
 * @version 1.0
 */
public class DictionarySearchGUI extends Application
{
    public static final int WIN_SIZE = 400;
    public static final int OUTER_PADDING = 50;
    public static final int SPACING_BETWEEN_CONTROLS = 10;
    public static final int PROMPT_FONT_SIZE = 30;
    private static final int MAX_RESULTS = 15;

    private IDictionary search;

    //controls
    private TextField searchBox;
    private Button lookupDefinition;
    private Label showDefinition;
    private ContextMenu partialMatchesList;

    @Override
    public void start(Stage stage)
    {
        //instantiate the search object for finding partial matches and definitions
        search = new DictionarySearch();

        //basic UI setup
        stage.setTitle("Autocomplete Search");
        stage.setScene(buildGUI());
        stage.show();
    }

    private Scene buildGUI()
    {
        //controls
        Label prompt = new Label("Search for a word");
        searchBox = new TextField();
        partialMatchesList = new ContextMenu();
        lookupDefinition = new Button("Search!");
        showDefinition = new Label();

        //related settings
        prompt.setFont(Font.font("Vani", FontWeight.NORMAL, PROMPT_FONT_SIZE));
        searchBox.setContextMenu(partialMatchesList);
        showDefinition.setWrapText(true);

        //events
        setAutocompleteEvents();
        setSearchEvents();

        //prepare the layout
        VBox panel = new VBox();
        panel.getChildren().addAll(prompt, searchBox, lookupDefinition, showDefinition);
        panel.setAlignment(Pos.TOP_CENTER);
        panel.setSpacing(SPACING_BETWEEN_CONTROLS);
        panel.setPadding(new Insets(OUTER_PADDING));

        return new Scene(panel, WIN_SIZE, WIN_SIZE);
    }

    private void setSearchEvents()
    {
        //this allows you to press enter on the search field and to find a definition
        //the text in the search field will then be highlighted so you can search
        //again quickly
        searchBox.setOnKeyReleased(keyEvent -> {
            if (keyEvent.getCode() == KeyCode.ENTER)
            {
                getDefinition();
                searchBox.selectAll();
            }
        });

        //this searchs for a definition when the search button is pressed
        lookupDefinition.setOnAction(actionEvent -> getDefinition());
    }

    private void getDefinition()
    {
        String definition = search.getDefinition(searchBox.getText());
        showDefinition.setText(definition == null ? "Word not found..." : definition);
    }

    private void setAutocompleteEvents()
    {
        //add the listener that shows partial matches as the user types
        searchBox.textProperty().addListener( (observable, oldValue, newValue) -> {
            String[] matches = search.getPartialMatches(newValue);

            if (matches != null)
            {
                //limit the number of items displayed
                matches = Arrays.copyOf(search.getPartialMatches(newValue), Math.min(MAX_RESULTS, matches.length));

                //update items
                ObservableList<MenuItem> items = partialMatchesList.getItems();
                items.clear();

                for (String match : matches)
                {
                    items.add(new MenuItem(match));
                }
            }

            partialMatchesList.show(searchBox, Side.BOTTOM, 0, 0);
        });

        //this adds a listener that places the partial match from the context menu
        //into the search text field when click on
        partialMatchesList.setOnAction(actionEvent ->
                searchBox.setText(((MenuItem)actionEvent.getTarget()).getText()));
    }

    public String toString()
    {
        return "Dictionary Search Application Version 1.0";
    }
}